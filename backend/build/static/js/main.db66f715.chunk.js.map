{"version":3,"sources":["components/Header.jsx","components/CreateNewItem.jsx","components/TodoItem.jsx","components/TodoList.jsx","App.js","serviceWorker.js","index.js"],"names":["Header","CreateNewItem","useState","name","setname","className","type","placeholder","value","onChange","e","target","onClick","preventDefault","axios","method","url","data","TodoItem","id","content","TodoList","items","setItems","useEffect","get","then","item","todoListItems","catch","err","console","log","map","key","_id","App","Boolean","window","location","hostname","match","ReactDOM","render","StrictMode","document","getElementById","navigator","serviceWorker","ready","registration","unregister","error","message"],"mappings":"8MAEe,SAASA,IACtB,OACE,6BACE,0C,2BCDS,SAASC,IAAiB,IAAD,EACdC,mBAAS,IADK,mBAC/BC,EAD+B,KACzBC,EADyB,KAiBtC,OACE,6BACE,yBAAKC,UAAU,wBACb,2BACEC,KAAK,OACLC,YAAY,WACZC,MAAOL,EACPM,SAVR,SAAsBC,GACpBN,EAAQM,EAAEC,OAAOH,UAWb,4BAAQI,QAxBd,SAAqBF,GACnBA,EAAEG,iBACFT,EAAQ,IAERU,IAAM,CACJC,OAAQ,OACRC,IAAK,mBACLC,KAAM,CACJd,KAAMA,OAgBN,OC1BO,SAASe,EAAT,GAAoC,IAAhBC,EAAe,EAAfA,GAAIC,EAAW,EAAXA,QAUrC,OACE,6BACE,yBAAKf,UAAU,QACb,2BAAOC,KAAK,WAAWH,KAAK,WAAWM,SAZ7C,WACEK,IAAM,CACJC,OAAQ,OACRC,IAAK,mBACLC,KAAM,CACJE,GAAIA,QAQJ,8BAAOC,KCXA,SAASC,IAAY,IAAD,EACPnB,mBAAS,IADF,mBAC1BoB,EAD0B,KACnBC,EADmB,KAajC,OAXAC,qBAAU,WACRV,IACGW,IAAI,aACJC,MAAK,SAACC,GACLJ,EAASI,EAAKV,KAAKW,kBAEpBC,OAAM,SAACC,GACNC,QAAQC,IAAIF,SAKhB,yBAAKzB,UAAU,aACb,wBAAIA,UAAU,gBACZ,kBAACJ,EAAD,MACCqB,EAAMW,KAAI,SAACN,GAAD,OACT,kBAACT,EAAD,CAAUgB,IAAKP,EAAKQ,IAAKhB,GAAIQ,EAAKQ,IAAKf,QAASO,EAAKxB,YCThDiC,MAXf,WACE,OACE,yBAAK/B,UAAU,OACb,4BAAQA,UAAU,cAChB,kBAACL,EAAD,MACA,kBAACqB,EAAD,SCEYgB,QACW,cAA7BC,OAAOC,SAASC,UAEe,UAA7BF,OAAOC,SAASC,UAEhBF,OAAOC,SAASC,SAASC,MACvB,2DCZNC,IAASC,OACP,kBAAC,IAAMC,WAAP,KACE,kBAAC,EAAD,OAEFC,SAASC,eAAe,SDyHpB,kBAAmBC,WACrBA,UAAUC,cAAcC,MACrBvB,MAAK,SAAAwB,GACJA,EAAaC,gBAEdtB,OAAM,SAAAuB,GACLrB,QAAQqB,MAAMA,EAAMC,c","file":"static/js/main.db66f715.chunk.js","sourcesContent":["import React from \"react\";\n\nexport default function Header() {\n  return (\n    <div>\n      <h1>Todo List</h1>\n    </div>\n  );\n}\n","import React, { useState } from \"react\";\nimport axios from \"axios\";\nimport \"../assets/styles.css\";\n\nexport default function CreateNewItem() {\n  const [name, setname] = useState(\"\");\n  function handleClick(e) {\n    e.preventDefault();\n    setname(\"\");\n\n    axios({\n      method: \"post\",\n      url: \"/api/todo/create\",\n      data: {\n        name: name,\n      },\n    });\n  }\n  function handleChange(e) {\n    setname(e.target.value);\n  }\n  return (\n    <div>\n      <div className='item create-new-item'>\n        <input\n          type='text'\n          placeholder='new item'\n          value={name}\n          onChange={handleChange}\n        />\n        <button onClick={handleClick}>+</button>\n      </div>\n    </div>\n  );\n}\n","import React from \"react\";\nimport axios from \"axios\";\nimport \"../assets/styles.css\";\n\nexport default function TodoItem({ id, content }) {\n  function onChange() {\n    axios({\n      method: \"post\",\n      url: \"/api/todo/delete\",\n      data: {\n        id: id,\n      },\n    });\n  }\n  return (\n    <div>\n      <div className='item'>\n        <input type='checkbox' name='checkbox' onChange={onChange} />\n        <span>{content}</span>\n      </div>\n    </div>\n  );\n}\n","import React, { useState, useEffect } from \"react\";\nimport \"../assets/styles.css\";\nimport CreateNewItem from \"./CreateNewItem\";\nimport TodoItem from \"./TodoItem\";\n\nimport axios from \"axios\";\n\nexport default function TodoList() {\n  const [items, setItems] = useState([]);\n  useEffect(() => {\n    axios\n      .get(\"/api/todo\")\n      .then((item) => {\n        setItems(item.data.todoListItems);\n      })\n      .catch((err) => {\n        console.log(err);\n      });\n  });\n\n  return (\n    <div className='container'>\n      <ul className='unstyle-list'>\n        <CreateNewItem />\n        {items.map((item) => (\n          <TodoItem key={item._id} id={item._id} content={item.name} />\n        ))}\n      </ul>\n    </div>\n  );\n}\n","import React from \"react\";\nimport \"./assets/styles.css\";\nimport Header from \"./components/Header\";\nimport TodoList from \"./components/TodoList\";\n\nfunction App() {\n  return (\n    <div className='App'>\n      <header className='App-header'>\n        <Header />\n        <TodoList />\n      </header>\n    </div>\n  );\n}\n\nexport default App;\n","// This optional code is used to register a service worker.\n// register() is not called by default.\n\n// This lets the app load faster on subsequent visits in production, and gives\n// it offline capabilities. However, it also means that developers (and users)\n// will only see deployed updates on subsequent visits to a page, after all the\n// existing tabs open on the page have been closed, since previously cached\n// resources are updated in the background.\n\n// To learn more about the benefits of this model and instructions on how to\n// opt-in, read https://bit.ly/CRA-PWA\n\nconst isLocalhost = Boolean(\n  window.location.hostname === 'localhost' ||\n    // [::1] is the IPv6 localhost address.\n    window.location.hostname === '[::1]' ||\n    // 127.0.0.0/8 are considered localhost for IPv4.\n    window.location.hostname.match(\n      /^127(?:\\.(?:25[0-5]|2[0-4][0-9]|[01]?[0-9][0-9]?)){3}$/\n    )\n);\n\nexport function register(config) {\n  if (process.env.NODE_ENV === 'production' && 'serviceWorker' in navigator) {\n    // The URL constructor is available in all browsers that support SW.\n    const publicUrl = new URL(process.env.PUBLIC_URL, window.location.href);\n    if (publicUrl.origin !== window.location.origin) {\n      // Our service worker won't work if PUBLIC_URL is on a different origin\n      // from what our page is served on. This might happen if a CDN is used to\n      // serve assets; see https://github.com/facebook/create-react-app/issues/2374\n      return;\n    }\n\n    window.addEventListener('load', () => {\n      const swUrl = `${process.env.PUBLIC_URL}/service-worker.js`;\n\n      if (isLocalhost) {\n        // This is running on localhost. Let's check if a service worker still exists or not.\n        checkValidServiceWorker(swUrl, config);\n\n        // Add some additional logging to localhost, pointing developers to the\n        // service worker/PWA documentation.\n        navigator.serviceWorker.ready.then(() => {\n          console.log(\n            'This web app is being served cache-first by a service ' +\n              'worker. To learn more, visit https://bit.ly/CRA-PWA'\n          );\n        });\n      } else {\n        // Is not localhost. Just register service worker\n        registerValidSW(swUrl, config);\n      }\n    });\n  }\n}\n\nfunction registerValidSW(swUrl, config) {\n  navigator.serviceWorker\n    .register(swUrl)\n    .then(registration => {\n      registration.onupdatefound = () => {\n        const installingWorker = registration.installing;\n        if (installingWorker == null) {\n          return;\n        }\n        installingWorker.onstatechange = () => {\n          if (installingWorker.state === 'installed') {\n            if (navigator.serviceWorker.controller) {\n              // At this point, the updated precached content has been fetched,\n              // but the previous service worker will still serve the older\n              // content until all client tabs are closed.\n              console.log(\n                'New content is available and will be used when all ' +\n                  'tabs for this page are closed. See https://bit.ly/CRA-PWA.'\n              );\n\n              // Execute callback\n              if (config && config.onUpdate) {\n                config.onUpdate(registration);\n              }\n            } else {\n              // At this point, everything has been precached.\n              // It's the perfect time to display a\n              // \"Content is cached for offline use.\" message.\n              console.log('Content is cached for offline use.');\n\n              // Execute callback\n              if (config && config.onSuccess) {\n                config.onSuccess(registration);\n              }\n            }\n          }\n        };\n      };\n    })\n    .catch(error => {\n      console.error('Error during service worker registration:', error);\n    });\n}\n\nfunction checkValidServiceWorker(swUrl, config) {\n  // Check if the service worker can be found. If it can't reload the page.\n  fetch(swUrl, {\n    headers: { 'Service-Worker': 'script' },\n  })\n    .then(response => {\n      // Ensure service worker exists, and that we really are getting a JS file.\n      const contentType = response.headers.get('content-type');\n      if (\n        response.status === 404 ||\n        (contentType != null && contentType.indexOf('javascript') === -1)\n      ) {\n        // No service worker found. Probably a different app. Reload the page.\n        navigator.serviceWorker.ready.then(registration => {\n          registration.unregister().then(() => {\n            window.location.reload();\n          });\n        });\n      } else {\n        // Service worker found. Proceed as normal.\n        registerValidSW(swUrl, config);\n      }\n    })\n    .catch(() => {\n      console.log(\n        'No internet connection found. App is running in offline mode.'\n      );\n    });\n}\n\nexport function unregister() {\n  if ('serviceWorker' in navigator) {\n    navigator.serviceWorker.ready\n      .then(registration => {\n        registration.unregister();\n      })\n      .catch(error => {\n        console.error(error.message);\n      });\n  }\n}\n","import React from \"react\";\nimport ReactDOM from \"react-dom\";\nimport \"./assets/styles.css\";\nimport App from \"./App\";\nimport * as serviceWorker from \"./serviceWorker\";\n\nReactDOM.render(\n  <React.StrictMode>\n    <App />\n  </React.StrictMode>,\n  document.getElementById(\"root\")\n);\n\n// If you want your app to work offline and load faster, you can change\n// unregister() to register() below. Note this comes with some pitfalls.\n// Learn more about service workers: https://bit.ly/CRA-PWA\nserviceWorker.unregister();\n"],"sourceRoot":""}